head(ef)
mm = makeErmaSet()
mm
head(colData(mm))
names(files(mm)) = colData(mm)$Epigenome.Mnemonic
head(files(mm))
mm
library(png)
im = readPNG(system.file("pngs/emparms.png", package="erma"))
grid.raster(im)
stateProfile(mm, "BRCA2")
stateProfile(mm, "EOMES")
gm = promoters(range(genemodel("BRCA2"))) # 2000 upstream, 200 down by default
library(BiocParallel)
register(MulticoreParam(workers=2))
library(GenomicFiles)
ans = reduceByFile( gm, files(mm), MAP=function(range,file) {
table( import(file, genome="hg19", which=range)$name ) } )
ans= unlist(ans, recursive=FALSE)
names(ans) = colData(mm)$Epigenome.Mnemonic
ans[1:4]
---
title: "Visualizing multivariate data with shiny"
library(ph525x)
esrraScan
library(ERBS)
data(GM12878)
esrraScan(bind=GM12878)
esrraScan("OCM", bind=GM12878)
esrraScan("OCM", bind=GM12878)
esrraScan("ESRRA", bind=GM12878)
esrraScan
library(MLInterfaces)
plspinHcube()
plspinHcube()
0
library(Biobase)
library(hgu133a.db)
library(ph525x)
esHclust = function(es) {
emat = t(exprs(es))
rownames(emat) = sampleNames(es)
dd = data.frame(emat)
dfHclust(dd)
}
library(tissuesGeneExpression)
data(tissuesGeneExpression)
tgeES = ExpressionSet(e)
annotation(tgeES) = "hgu133a.db"
pData(tgeES) = tab
featureNames(tgeES) =
make.names(mapIds(hgu133a.db, keys=featureNames(tgeES),
keytype="PROBEID", column="SYMBOL"), unique=TRUE)
set.seed(1234)
esHclust( tgeES[1:50, sample(1:ncol(tgeES), size=40) ] )
tgeES
sampleNames(tgeES) = make.names(tgeES$Tissue, unique=TRUE)
set.seed(1234)
esHclust( tgeES[1:50, sample(1:ncol(tgeES), size=40) ] )
library(ph525x)
stodden1()
par(mar=c(0,0,0,0))
stodden1()
par(mar=c(7,7,7,7))
stodden1()
1
2
3
3+4
5*4
5*5
3*2
6/3
barplot(c(3,4,5,3,4))
barplot(c(1,2,3,4,5,6,7,8,9,10))
1:10
1:1000
seq(1,20,2)
seq(2,20,2)
seq(2,20,3)
barplot(seq(2,20,3))
plot(1:10,1:10)
locator(n=10)
plot(.Last.value, type="l")
cat = locator(n=20)
kitty = cat
plot(kitty)
plot(kitty, type="l")
kit2 = locator(n=5)
lines(kit2)
eye = locator(n=6)
lines(eye)
eye2  = locator(n=6)
lines(eye2)
mouth = locator(n=10)
lines(mouth, col="red")
lines(mouth, col="red", lwd=4)
lines(mouth, col="red", lwd=10)
lines(mouth, col="red", lwd=20)
lines(mouth, col="red", lwd=30)
lines(mouth, col="white", lwd=20)
lines(mouth, col="white", lwd=30)
lines(mouth, col="white", lwd=35)
lengths = c(100,200,300,100,100)
mat = cbind(c(1,1,0,1,0),c(1,1,1,1,1),c(0,1,1,0,1))
w = 1000
counts = c(125,350,300,125,100)
theta.hat = c(1,2,3)/10000
mat %*% theta.hat*lengths*w
LHS = counts/(lengths*w)
lm.fit(mat, LHS)$coeff
theta.hat = .Last.value
mat %*% theta.hat*lengths*w
counts = c(60,320,420,60,140)
LHS = counts/(lengths*w)
lm.fit(mat, LHS)$coeff
theta.hat = .Last.value
mat %*% theta.hat*lengths*w
theta.hat
.0002
install.packages("~/SDSFoundations_1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(SDSFoundations)
ls(2)
ls()
library(ComplexHeatmap)
library(BMI713pack)
ex = getOtoExprs()
exmat = data.matrix(ex)
cex = cor(t(exmat))
Heatmap(cex)
library(BMI713pack)
ex = getOtoExprs()
head(ex[,1:7],2)
##
library(BMI713pack)
ex = getOtoExprs()
dim(ex)
getOtoExprs
debug(getOtoExprs)
getOtoExprs
getOtoExprs()
xpath
class(exsh)
class(exsh)
exsh
library(dplyr)
exsh
tmp %>% glimpse()
v1 = c(1,2,3,4)
v2 = c(5,6,7,8)
tf = tempfile()
tf
df = data.frame(v1,v2)
df
write.csv(df, tf)
readLines(tf)
z = read.csv(tf)
z
z = read.csv(tf, row.names=NULL)
z
z = read.csv(tf, row.names=NA)
z = read.csv(tf, row.names=1)
z
edit(tf)
editor
vi
vi(tf)
vi(file=tf)
vi(file=tf)
readLines(tf)
read.csv(tf)
vi(file=tf)
readLines(tf)
read.csv(tf)
args(edit)
?edit
edit(file=tf)
read.csv(tf)
read.csv(tf)[2,]
]
date()
library(knitr)
library(knitr)
knitr::knit_hooks$set(mysize = function(before, options, envir) {
if (before)
return(options$size)
})
suppressPackageStartupMessages({
library(BMI713pack)
ims = vcImages()
})
grid.raster(ims[["buttonTab1"]], height=.755555)
tab1fn = system.file("txt/munafoTab1.txt", package="BMI713pack")
tab1fn # will vary by system
cat(readLines(tab1fn, n=6), sep="\n")
tab1df = read.delim(tab1fn, sep=" ", stringsAsFactors=FALSE)
head(tab1df)
library(DT)
datatable(tab1fn)
datatable(tab1df)
grid.raster(ims[["buttonTab1"]], height=.755555)
grid.raster(ims[["buttonTab1"]], height=.755555)
library(knitr)
knitr::knit_hooks$set(mysize = function(before, options, envir) {
if (before)
return(options$size)
})
suppressPackageStartupMessages({
library(BMI713pack)
ims = vcImages()
})
grid.raster(ims[["buttonTab1"]], height=.755555)
tab1fn = system.file("txt/munafoTab1.txt", package="BMI713pack")
tab1fn # will vary by system
cat(readLines(tab1fn, n=6), sep="\n")
tab1df = read.delim(tab1fn, sep=" ", stringsAsFactors=FALSE)
head(tab1df)
grid.raster(ims[["buttonPowerHisto"]])
hist(tab1df$medPow, xlab="median power of studies in meta-analyses")
hist(tab1df$medPow, xlab="median power of studies in meta-analyses")
dev.off()
hist(tab1df$medPow, xlab="median power of studies in meta-analyses")
The paper included:
hist(tab1df$medPow, xlab="median power of studies in meta-analyses")
maxp = gsub(".*,(.*)\\)", "\\1", tab1df$rngPow)
hist(as.numeric(maxp), xlab="Maximum power per metaanalysis")
summary(as.numeric(maxp))
maxn = gsub(".*,(.*)\\)", "\\1", tab1df$rngN)
plot(as.numeric(maxn), as.numeric(maxp),
xlab="Maximum power per metaanalysis", log="x")
summary(as.numeric(maxn))
library(knitr)
knitr::knit_hooks$set(mysize = function(before, options, envir) {
if (before)
return(options$size)
})
suppressPackageStartupMessages({
library(BMI713pack)
ims = vcImages()
})
grid.raster(ims[["buttonTab1"]], height=.755555)
grid.raster(ims[["buttonTab1"]], height=.755555)
```
tab1fn = system.file("txt/munafoTab1.txt", package="BMI713pack")
tab1fn # will vary by system
cat(readLines(tab1fn, n=6), sep="\n")
tab1df = read.delim(tab1fn, sep=" ", stringsAsFactors=FALSE)
head(tab1df)
grid.raster(ims[["buttonPowerHisto"]])
hist(tab1df$medPow, xlab="median power of studies in meta-analyses")
maxp = gsub(".*,(.*)\\)", "\\1", tab1df$rngPow)
hist(as.numeric(maxp), xlab="Maximum power per metaanalysis")
summary(as.numeric(maxp))
head(maxp)
maxn = gsub(".*,(.*)\\)", "\\1", tab1df$rngN)
plot(as.numeric(maxn), as.numeric(maxp),
ylab="Maximum power per metaanalysis",
xlab="Sample size", log="x")
summary(as.numeric(maxn))
library
library(BMI713pack)
tab1fn = system.file("txt/munafoTab1.txt", package="BMI713pack")
tab1fn
cat(readLines(tab1fn, n=6), sep="\n")
tab1df = read.delim(tab1fn, sep=" ", stringAsFactors=FALSE)
tab1df = read.delim(tab1fn, sep=" ", stringsAsFactors=FALSE)
tab1df = read.delim(tab1fn, sep=" ", stringsAsFactors=FALSE)
head(tab1df)
hist(tab1df$medPow)
hist(tab1df[,"medPow"])
tab1df$medPow
dim(medPow)
dim(tab1df)
length(tab1df$medPow)
hist(tab1df$medPow, xlab="median power", main="Button table1")
?hist
str(tab1df)
str(tab1df[,1:5])
str(tab1df[,6:10])
ex = getOtoExprs()
dim(ex)
ex[1:5,1:6]
library(dplyr)
?vignette
vignettte(package="dplyr")
vignette(package="dplyr")
punnett
library(BMI713pack)
library(BiocInstal)
mydf2 = data.frame(x=seq(-9,9,.1), y=dnorm(seq(-9,9,.1), 0, sqrt(3)))
mydf = data.frame(x=seq(-9,9,.1), y=dt(seq(-9,9,.1), 3))
library(ggplot2)
library(plotly)
ggplot(mydf, aes(x=x,y=y)) + geom_line() + geom_line(data=mydf2, aes(x = x, y = y, color = "red")) -> bag
bag
ggplotly(bag)
library(sparklyr)
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc = spark_connect
sc = spark_connect(hostname="local")
args(spark_connect)
sc = spark_connect("localhost")
sc = spark_connect(master="local")
sc <- spark_connect(master = "local", config = list())
library(sparklyr)
sc = spark_connect("local")
sc = spark_connect(master="local")
install.packages("~/grassShiny_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages(c("cba", "ReorderCluster"))
install.packages("~/grassShiny_0.0.1.tar.gz", repos = NULL, type = "source")
library(grassShing)
library(grassShiny)
ls(2)
search()
args(getHC)
library(shinyexample)
runExample()
install.packages("~/Research/SHWETA/irisshinyapp/shinyexample_0.1.1.tar.gz", repos = NULL, type = "source")
library(gQTLstats)
example(tqbrowser)
0
sessionInfo()
subsetByRanges
library(BiocInstaller)
biocLite("erma")
bq = getBQ()
library(shiny)
source("gad1.txt")
ls()
tt = tcgqTable(bq)
tt = tcgaTable(bq)
library(miniUI
)
tt = tcgaTable(bq)
tt
tt = tcgaTable(bq)
tt
tt
source("gad2.txt")
joe()
library(BiocInstaller)
biocLite("leaflet")
joe()
joe()
joe
?icon
joe()
source("gad1.txt")
source("gad1.txt")
ls()
tcgaTable(bq)
source("gad1.txt")
tcgaTable(bq)
source("gad1.txt")
bq
ls()
tcgaTable(bq)
joe()
library(cgcR)
isbApp(bq)
library(ivygapSE)
ivyGlimpse()
devtools::install_github("vjcitn/ivygapSE")
library(ivygapSE)
ivyGlimpse()
q()
getwd()
q()
set.seed(1234)
X = rnorm(50)
t1 = t.test(X)
str(t1)
dem = replicate(1000, t.test(rnorm(50)))
dem = replicate(1000, t.test(rnorm(50))$conf.int)
dim(dem)
dem[,1:5]
mean(dem[1,]<0 & dem[2,]>0)
crnorm = function(n, ...) {x = rnorm(n,...); x[1]=100; x}
dem = replicate(1000, t.test(crnorm(50))$conf.int)
mean(dem[1,]<0 & dem[2,]>0)
crnorm = function(n, ...) {x = rnorm(n,...); x[1]=1; x}
dem = replicate(1000, t.test(crnorm(50))$conf.int)
mean(dem[1,]<0 & dem[2,]>0)
crnorm = function(n, ...) {x = rnorm(n,...); x[1]=10; x}
dem = replicate(1000, t.test(crnorm(50))$conf.int)
mean(dem[1,]<0 & dem[2,]>0)
crnorm = function(n, ...) {x = rnorm(n,...); x[1]=15; x}
dem = replicate(1000, t.test(crnorm(50))$conf.int)
mean(dem[1,]<0 & dem[2,]>0)
crnorm = function(n, ...) {x = rnorm(n,...); x[1]=7; x}
dem = replicate(1000, t.test(crnorm(50))$conf.int)
mean(dem[1,]<0 & dem[2,]>0)
plot(cars)
hist(rnorm(20))
plot(cars)
hist(rnorm(20))
suppressPackageStartupMessages({
library(parody)
library(ggplot2)
library(gridExtra)
library(DESeq2)
})
ts_zpm = function(d) sqrt(length(d))*mean(d)/sd(d)
ts_zpm = function(d) sqrt(length(d))*mean(d)/sd(d)
contam1 = function(x, slip=5) {x[1] = x[1]+slip; x}
set.seed(12345)
X = rnorm(50)
ts_zpm(X)
ts_zpm(contam1(X))
ts_zpm(contam1(X,100))
set.seed(12345)
X = rnorm(50)
tst = t.test(X)
tst
set.seed(12345)
simdist = replicate(10000,  ts_zpm( rnorm(50) ))
head(simdist)
contam1
contamk = function(x, k=2, slip=5) {x[1:k] = x[1:k]+slip; x}
plot(cars)
library(BSgenome.Hsapiens.UCSC.hg19)
Hsapiens
elementLengths(Hsapiens)
library(BiocGenerics)
elementLengths(Hsapiens)
library(BiocGenerics)
elementNROWS(Hsapiens)
getwd()
plot(cars)
library(tenXplore)
tenXplore()
q()
library(devtools)
install_github("vjcitn/tenXplore")
library(tenXplore)
tenXplore()
install_github("vjcitn/restfulSE")
q()
library(DT)
datatable(iris)
datatable(iris)
DT::datatable(iris)
DT::datatable(iris)
library(DT)
datatable(iris)
help.start()
datatable(iris)
help(package=DT)
?datatable
example(datatable)
datatable(iris)
library(DT)
datatable(iris)
vignette("DT", package="DT")
datatable(iris)
example(datatable)
datatable(iris)
example(datatable)
library(htmlwidgets)
ls(2)
example(createWidget)
?JS
example(JS)
example(datatable)
example(datatable)
vignette("DT", package="DT")
example(datatable)
example(datatable)
datatable(iris)
datatable(iris)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(cars)
library(ggplot2)
library(plotly)
p1 = ggplot(iris, aes(x=Sepal.Width, y=Sepal.length, colour=Species)) + geom_point()
p1
plot(cars)
library(ggplot2)
library(plotly)
p1 = ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, colour=Species)) + geom_point()
p1
plot(cars)
library(ggplot2)
library(plotly)
p1 = ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, colour=Species)) + geom_point()
ggplotly(p1)
library(tissuesGeneExpression)
library(SummarizedExperiment)
data(tissuesGeneExpression)
tissSE = SummarizedExperiment(list(rma=e))
colData(tissSE) = DataFrame(tab)
IDs = c("201884_at","209169_at", "206269_at","207437_at","219832_s_at","212827_at")
par(mar=c(6,4,2,2), mfrow=c(3,2))
for(i in IDs){
boxplot(assay(tissSE)[i,]~tissSE$Tissue,las=2,main=i)
}
library(devtools)
install_github("vjcitn/ivygapSE")
setwd("Research/ITCR/ivygapSE")
setwd("inst/ivyGlimpse")
dir()
source("app.R", echo=TRUE)
rsconnect::showlogs()
rsconnect::showLogs()
